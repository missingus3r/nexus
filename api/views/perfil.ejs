<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .profile-container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem 0;
        }

        .profile-header {
            background: linear-gradient(135deg, var(--primary-color), #1565c0);
            color: white;
            padding: 2rem;
            border-radius: 8px;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .profile-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            color: var(--primary-color);
            flex-shrink: 0;
        }

        .profile-info h1 {
            margin: 0 0 0.5rem 0;
            font-size: 2rem;
        }

        .profile-info p {
            margin: 0.25rem 0;
            opacity: 0.9;
        }

        .profile-badge {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            text-align: center;
        }

        .stat-card .number {
            font-size: 2.5rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .stat-card .label {
            color: var(--text-secondary);
            font-size: 0.875rem;
            text-transform: uppercase;
        }

        .section {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .section h2 {
            margin-top: 0;
            color: var(--primary-color);
            border-bottom: 2px solid var(--background);
            padding-bottom: 0.5rem;
        }

        .activity-item {
            padding: 1rem;
            border-left: 3px solid var(--primary-color);
            margin-bottom: 1rem;
            background: var(--background);
            border-radius: 4px;
        }

        .activity-item .date {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .activity-item .type {
            font-weight: bold;
            margin-bottom: 0.25rem;
        }

        .settings-item {
            padding: 1rem;
            border-bottom: 1px solid var(--background);
        }

        .settings-item:last-child {
            border-bottom: none;
        }

        .settings-item label {
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
        }

        .empty-state {
            text-align: center;
            padding: 3rem;
            color: var(--text-secondary);
        }

        .danger-zone {
            border: 2px solid var(--danger-color);
            background: #fff5f5;
        }

        .danger-zone h2 {
            color: var(--danger-color);
            border-bottom-color: var(--danger-color);
        }

        @media (max-width: 768px) {
            .profile-header {
                flex-direction: column;
                text-align: center;
            }

            .profile-info h1 {
                font-size: 1.5rem;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <%- include('partials/header', { page: page, isAuthenticated: isAuthenticated }) %>

    <div class="main-content">
        <div class="container">
            <div class="profile-container">
                <!-- Profile Header -->
                <div class="profile-header">
                    <div class="profile-avatar" id="userAvatar">
                        üë§
                    </div>
                    <div class="profile-info">
                        <h1 id="userName">Cargando...</h1>
                        <p id="userEmail">email@example.com</p>
                        <p>Miembro desde: <span id="memberSince">-</span></p>
                        <span class="profile-badge" id="userRole">Usuario</span>
                    </div>
                </div>

                <!-- Stats Grid -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="number" id="totalReports">0</div>
                        <div class="label">Reportes</div>
                    </div>
                    <div class="stat-card">
                        <div class="number" id="totalValidations">0</div>
                        <div class="label">Validaciones</div>
                    </div>
                    <div class="stat-card">
                        <div class="number" id="reputationScore">0</div>
                        <div class="label">Reputaci√≥n</div>
                    </div>
                </div>

                <!-- Recent Activity -->
                <div class="section">
                    <h2>Actividad Reciente</h2>
                    <div id="recentActivity">
                        <div class="empty-state">
                            <p>Cargando actividad...</p>
                        </div>
                    </div>
                </div>

                <!-- Settings -->
                <div class="section">
                    <h2>Configuraci√≥n</h2>
                    <div class="settings-item">
                        <label>
                            <input type="checkbox" id="emailNotifications">
                            <span>Recibir notificaciones por email</span>
                        </label>
                    </div>
                    <div class="settings-item">
                        <label>
                            <input type="checkbox" id="publicProfile">
                            <span>Perfil p√∫blico</span>
                        </label>
                    </div>
                    <div class="settings-item">
                        <label>
                            <input type="checkbox" id="showLocation">
                            <span>Mostrar ubicaci√≥n en reportes</span>
                        </label>
                    </div>
                </div>

                <!-- Account Actions -->
                <div class="section">
                    <h2>Acciones de Cuenta</h2>
                    <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                        <a href="/logout" class="btn btn-secondary">Cerrar Sesi√≥n</a>
                        <% if (user && user.role === 'admin') { %>
                            <a href="/admin" class="btn btn-primary">Panel de Admin</a>
                        <% } %>
                    </div>
                </div>

                <!-- Danger Zone -->
                <div class="section danger-zone">
                    <h2>‚ö†Ô∏è Zona de Peligro</h2>
                    <p style="color: var(--text-secondary); margin-bottom: 1rem;">
                        Las acciones en esta secci√≥n son irreversibles. Procede con precauci√≥n.
                    </p>
                    <button id="deleteAccountBtn" class="btn btn-danger">
                        üóëÔ∏è Eliminar Cuenta Permanentemente
                    </button>
                    <p style="font-size: 0.875rem; color: var(--text-secondary); margin-top: 0.5rem;">
                        Esta acci√≥n eliminar√° todos tus datos, reportes y actividad. No se puede deshacer.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Account Confirmation Modal -->
    <div id="deleteAccountModal" class="modal">
        <div class="modal-content" style="max-width: 500px;">
            <div class="modal-header">
                <h2>‚ö†Ô∏è Confirmar Eliminaci√≥n</h2>
                <button id="closeDeleteModal" class="modal-close">&times;</button>
            </div>
            <div style="padding: 1rem 0;">
                <p style="margin-bottom: 1rem;">
                    ¬øEst√°s seguro que deseas eliminar tu cuenta <strong id="deleteUsername">username</strong>?
                </p>
                <div style="background: #fff3cd; border-left: 4px solid var(--warning-color); padding: 1rem; margin-bottom: 1rem; border-radius: 4px;">
                    <strong>‚ö†Ô∏è Esta acci√≥n es permanente e irreversible.</strong>
                    <ul style="margin: 0.5rem 0 0 1.5rem;">
                        <li>Se eliminar√°n todos tus reportes</li>
                        <li>Se perder√° tu historial de actividad</li>
                        <li>Se borrar√°n tus validaciones</li>
                        <li>No podr√°s recuperar tu cuenta</li>
                    </ul>
                </div>
                <div class="form-group">
                    <label for="confirmDelete">
                        Escribe <strong>"ELIMINAR"</strong> para confirmar:
                    </label>
                    <input type="text" id="confirmDelete" placeholder="Escribe ELIMINAR" style="width: 100%; padding: 0.5rem; border: 1px solid #ddd; border-radius: 4px;">
                </div>
                <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                    <button id="confirmDeleteBtn" class="btn btn-danger" disabled style="flex: 1;">
                        S√≠, Eliminar Mi Cuenta
                    </button>
                    <button id="cancelDeleteBtn" class="btn btn-secondary" style="flex: 1;">
                        Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>

    <script>
        document.addEventListener('DOMContentLoaded', loadProfile);

        async function loadProfile() {
            try {
                const response = await fetch('/api/auth/profile');
                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Error al cargar perfil');
                }

                displayProfile(data);
            } catch (error) {
                console.error('Error loading profile:', error);
                document.getElementById('userName').textContent = 'Error al cargar perfil';
            }
        }

        function displayProfile(data) {
            // Header info
            document.getElementById('userName').textContent = data.user.username || 'Usuario';
            document.getElementById('userEmail').textContent = data.user.email || '';
            document.getElementById('memberSince').textContent = new Date(data.user.createdAt).toLocaleDateString('es-UY');

            const roleText = data.user.role === 'admin' ? 'Administrador' : 'Usuario';
            document.getElementById('userRole').textContent = roleText;

            // Avatar emoji based on role
            const avatarEmoji = data.user.role === 'admin' ? 'üë®‚Äçüíº' : 'üë§';
            document.getElementById('userAvatar').textContent = avatarEmoji;

            // Stats
            document.getElementById('totalReports').textContent = data.stats.totalReports || 0;
            document.getElementById('totalValidations').textContent = data.stats.totalValidations || 0;
            document.getElementById('reputationScore').textContent = data.stats.reputation || 0;

            // Recent Activity
            displayActivity(data.recentActivity || []);

            // Settings (if provided)
            if (data.settings) {
                document.getElementById('emailNotifications').checked = data.settings.emailNotifications || false;
                document.getElementById('publicProfile').checked = data.settings.publicProfile || false;
                document.getElementById('showLocation').checked = data.settings.showLocation || false;
            }
        }

        function displayActivity(activities) {
            const container = document.getElementById('recentActivity');

            if (activities.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>No hay actividad reciente</p>
                        <p style="margin-top: 1rem;">
                            <a href="/map" class="btn btn-primary">Reportar un Incidente</a>
                        </p>
                    </div>
                `;
                return;
            }

            container.innerHTML = activities.map(activity => {
                const typeLabels = {
                    'report': 'Report√≥ un incidente',
                    'validation': 'Valid√≥ un reporte',
                    'comment': 'Coment√≥ en un incidente'
                };

                return `
                    <div class="activity-item">
                        <div class="type">${typeLabels[activity.type] || activity.type}</div>
                        <div>${activity.description || ''}</div>
                        <div class="date">${new Date(activity.timestamp).toLocaleString('es-UY')}</div>
                    </div>
                `;
            }).join('');
        }

        // Settings change handlers
        document.getElementById('emailNotifications')?.addEventListener('change', saveSettings);
        document.getElementById('publicProfile')?.addEventListener('change', saveSettings);
        document.getElementById('showLocation')?.addEventListener('change', saveSettings);

        async function saveSettings() {
            const settings = {
                emailNotifications: document.getElementById('emailNotifications').checked,
                publicProfile: document.getElementById('publicProfile').checked,
                showLocation: document.getElementById('showLocation').checked
            };

            try {
                const response = await fetch('/api/auth/settings', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settings)
                });

                if (!response.ok) {
                    throw new Error('Error al guardar configuraci√≥n');
                }

                console.log('Settings saved successfully');
            } catch (error) {
                console.error('Error saving settings:', error);
                alert('Error al guardar la configuraci√≥n');
            }
        }

        // Delete Account Modal
        const deleteAccountBtn = document.getElementById('deleteAccountBtn');
        const deleteAccountModal = document.getElementById('deleteAccountModal');
        const closeDeleteModal = document.getElementById('closeDeleteModal');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
        const confirmDeleteInput = document.getElementById('confirmDelete');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');

        deleteAccountBtn?.addEventListener('click', () => {
            deleteAccountModal.classList.add('active');
            const username = document.getElementById('userName').textContent;
            document.getElementById('deleteUsername').textContent = username;
        });

        closeDeleteModal?.addEventListener('click', () => {
            deleteAccountModal.classList.remove('active');
            confirmDeleteInput.value = '';
            confirmDeleteBtn.disabled = true;
        });

        cancelDeleteBtn?.addEventListener('click', () => {
            deleteAccountModal.classList.remove('active');
            confirmDeleteInput.value = '';
            confirmDeleteBtn.disabled = true;
        });

        // Enable delete button only when "ELIMINAR" is typed
        confirmDeleteInput?.addEventListener('input', (e) => {
            const value = e.target.value.trim();
            confirmDeleteBtn.disabled = value !== 'ELIMINAR';
        });

        // Handle account deletion
        confirmDeleteBtn?.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/auth/delete-account', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error || 'Error al eliminar cuenta');
                }

                // Account deleted successfully
                alert('Tu cuenta ha sido eliminada exitosamente.');
                window.location.href = '/';
            } catch (error) {
                console.error('Error deleting account:', error);
                alert('Error al eliminar la cuenta: ' + error.message);
            }
        });

        // Close modal when clicking outside
        deleteAccountModal?.addEventListener('click', (e) => {
            if (e.target === deleteAccountModal) {
                deleteAccountModal.classList.remove('active');
                confirmDeleteInput.value = '';
                confirmDeleteBtn.disabled = true;
            }
        });
    </script>
</body>
</html>
